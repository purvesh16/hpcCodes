import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class ParallelReductionOperations {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Calculate Min, Max, Sum, and Average using parallel stream and collectors
        int min = numbers.parallelStream()
                .min(Integer::compareTo)
                .orElseThrow(() -> new RuntimeException("List is empty"));

        int max = numbers.parallelStream()
                .max(Integer::compareTo)
                .orElseThrow(() -> new RuntimeException("List is empty"));

        int sum = numbers.parallelStream()
                .mapToInt(Integer::intValue)
                .sum();

        double average = numbers.parallelStream()
                .mapToInt(Integer::intValue)
                .average()
                .orElseThrow(() -> new RuntimeException("List is empty"));

        // Print the results
        System.out.println("Min: " + min);
        System.out.println("Max: " + max);
        System.out.println("Sum: " + sum);
        System.out.println("Average: " + average);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class ParallelReductionOperations {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Calculate Min, Max, Sum, and Average using parallel stream and collectors
        int min = numbers.parallelStream()
                .min(Integer::compareTo)
                .orElseThrow(() -> new RuntimeException("List is empty"));

        int max = numbers.parallelStream()
                .max(Integer::compareTo)
                .orElseThrow(() -> new RuntimeException("List is empty"));

        int sum = numbers.parallelStream()
                .mapToInt(Integer::intValue)
                .sum();

        double average = numbers.parallelStream()
                .mapToInt(Integer::intValue)
                .average()
                .orElseThrow(() -> new RuntimeException("List is empty"));

        // Print the results
        System.out.println("Min: " + min);
        System.out.println("Max: " + max);
        System.out.println("Sum: " + sum);
        System.out.println("Average: " + average);
    }
}
